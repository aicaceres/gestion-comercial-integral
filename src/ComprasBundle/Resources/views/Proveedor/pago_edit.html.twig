{% extends "AppBundle::layout.html.twig" %}

{% block pageheader %}
{% block extra_css %}
<link rel="stylesheet" href="{{ asset('assets/css/style.ventas.css') }}" type="text/css" media="all" />
{% endblock %}
<div class="pageheader notab">
    <h1 class="pagetitle">Proveedor: {{entity.proveedor.nombre}}</h1>
</div><!--pageheader-->
{% endblock %}

{% block contentwrapper %}
<div id="contentwrapper" class="contentwrapper">
<h1 id="popup_title" >{{ (entity.id) ? 'Editar datos' : 'Nueva O. Pago' }} &nbsp;&nbsp;#{{ '%04d'|format(entity.prefijoNro) ~ '-' ~ '%08d'|format(entity.pagoNro) }}
        <span class="floatright fechahora">
            {{entity.fecha|date('d/m/Y')}}
            <span class="js-hora"> {{entity.fecha|date('H:i:s')}}</span> &nbsp;| &nbsp; {{app.user.username}} </span>
</h1>
{% include "AppBundle::notificacion.html.twig" %}
<div class="divForm divEdicion">
    {{ form_start(form, {'attr': {'class': 'form-horizontal','id':'comprasbundle_pagoproveedor'}}) }}
        {{ form_errors(form) }}
        <fieldset class="fields" >
            {% include "ComprasBundle:Proveedor:block-proveedor.html.twig" %}

            <div style="display: inline-block; width: 20%">
                {{ form_label(form.fecha) }}
                {{ form_widget(form.fecha, { 'attr': {'class' : 'datepicker'} }) }}
            </div>

            <div style="display: inline-block; width: 20%">
                {{ form_label(form.nroComprobante)  }}
                {{ form_widget(form.nroComprobante, { 'attr': {'class' : 'mediuminput hasInfo','tabindex':'0','maxlength':'20', 'title':'N° de comprobante otorgado por el Proveedor'} })  }}
            </div>

        </fieldset>

        <fieldset >
            <div class="datos-proveedor" >
                {% include "ComprasBundle:Proveedor:_partial-datos-proveedor.html.twig" with {'item':entity.proveedor} %}
            </div>
        </fieldset>
        <fieldset class="fields">
            <div style="display: inline-block; width: 65%">
                {{ form_label(form.concepto)  }}
                <div id="facturas"></div>
            </div>
            <div style="display: inline-block; width: 10%">
                <label for="comprasbundle_pagoproveedor_retencionGanancias" class="required">DGI: <span id="lblGanancia"></label>
                <strong class="simbolo">$</strong>
                {{ form_widget(form.retencionGanancias,{'attr':{'class':'number mediuminput', 'readonly':'readonly','title':'Retención de Ganancias'}}) }}
            </div>
            <div style="display: inline-block; width: 13%">
                <label for="comprasbundle_pagoproveedor_retencionRentas" class="required">DGR: [ {{ lblRentas }} ] </label>
                <strong class="simbolo">$</strong>
                {{ form_widget(form.montoRentas,{'attr':{'class':'number mediuminput', 'readonly':'readonly','title':'Retención de Rentas'}}) }}
            </div>
        </fieldset>
        <fieldset class="fields" >
            <div style="display: inline-block; width: 75%">
                {{ form_label(form.detalle,'OBSERVACIONES:') }}
                {{ form_widget(form.detalle,{'attr': {'style': 'height:20px'}}) }}
            </div>
            <div style="display: inline-block; width: 15%">
                {{ form_label(form.importe,'TOTAL:') }}
                <strong class="simbolo">$</strong>
                {{ form_widget(form.importe,{'attr':{'class':'number mediuminput', 'readonly':'readonly','title':'Sumatoria de saldos de facturas seleccionadas'}}) }}
            </div>
        </fieldset>

        <fieldset class="detalle_pago" >
            <div style="display:inline-block; width:85%; margin:10px 0 10px 5%;" >
                <h5>DETALLE DEL PAGO:</h5>
                <table style="width:100%" cellpadding="0" cellspacing="0" border="0" class="tabla-pagos stdtable noaction" >
                    {% set prototype = form.cobroDetalles.vars.prototype %}
                    <tbody data-index="{{form.cobroDetalles | length }}"
                        data-prototype="{% filter escape %}{% include 'VentasBundle:Cobro:prototype.html.twig' with {'item':prototype,'entity':entity} %}{% endfilter %}"
                    >
                    {% for det in form.cobroDetalles %}
                        <tr>
                            <td></td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
                <table style="width:100%" cellpadding="0" cellspacing="0" border="0" class="resumen-pagos stdtable noaction">
                    <thead>
                        <tr>
                            <th style="text-align:right">
                                IMPORTE: &nbsp;
                                <span class="simbolo" style="font-size:16px">$ </span>
                                <span class="pago" style="font-size:16px" >0</span>.-
                            </th>
                            <th width="150px" class="vueltoTh">
                                CAMBIO: &nbsp;
                                <span class="simbolo" style="font-size:16px">$ </span>
                                <span class="vuelto" style="font-size:16px"></span>
                            </th>
                            <th width="30px" style="text-align:center;"><a href="javascript:void(0)" id="linkAddPago" tabindex="0" title="Agregar"><span class="add-item-button">+</span></th>
                        </tr>
                    </thead>
                </table>

            </div>
        </fieldset>

        <fieldset >
            <br clear="all" />

            <input type="hidden" id="txtconcepto" name="txtconcepto"/>
            <div class="actionbutton">
                 <button class="guardar" id="guardar" type="button">Guardar</button>
                <a class="cancelar" type="button" href="{{ path('compras_proveedor_pagos')}}">Cancelar</a>
            </div>
        </fieldset>
        <div name="rest" style="display:none">{{ form_rest(form) }}</div>
    {{ form_end(form) }}
</div>
</div>
<div id="dialog-tipo" title="Elegir Pago" style="display:none">
<form>
    <button type="button" class="stdbtn btn_black" data-tipo="EFECTIVO">EFECTIVO</button>
    <button type="button" class="stdbtn btn_black" data-tipo="CHEQUE">CHEQUE</button>
    <button type="button" class="stdbtn btn_black" data-tipo="TARJETA">TARJETA</button>
</form>
</div>
{% endblock %}
{% block extra_javascripts %}
<script type="text/javascript" src="{{ asset('assets/js/plugins/jquery.inputmask.js') }}"></script>
<script type="text/javascript">
jQuery(function ($) {
    $(window).on('load', function () {
        $( "#dialog-tipo" ).dialog({
            autoOpen: false,
            height: 100,
            width: 350,
            modal: true
        });

    $('#comprasbundle_pagoproveedor_proveedor').attr('readonly', true);
    $('.datepicker').datepicker({dateFormat: 'dd-mm-yy'});
// si la pantalla es chica expandir
    if ( $('#contentwrapper').width() < 1000) {
        $('.togglemenu').click();
    }
// refresca la hora en un campo fecha-hora
    horaRefresh = setInterval(function () {
        $('.js-hora').html( new Date().toLocaleString().slice(9) );
    }, 1000);


    $('#comprasbundle_pagoproveedor_proveedor').on('change',function(){
        let provId = $(this).val();
        $.ajax({
            url: "{{ path("compras_proveedor_pagos_getfacturas") }}",
            //async: true,
            data: 'prov='+ provId ,
            success: function(data) {
                $('#facturas').html(data);
                $('#selectComprobantes').select2();
                $('#selectComprobantes').on('change', function(){
                    let selected = $(this).val();
                    changeComprobantes( provId, selected )
                });
                $('#selectComprobantes').select2('focus');
            },
            error: function() {
                alert('No se puede realizar la operación en este momento');
            }
       });
    }).trigger('change');

    $(document).on('click','.js_get_cheques', function() {
        cargarCheques( $(this).closest('.chequeTd') );
    });


    $('#guardar').on('click', function(){
        $('#txtconcepto').val($("[name='concepto']").val());

        if( !$('#txtconcepto').val() ){
            jAlert('Debe indicar los comprobantes a abonar!');
            $('#selectComprobantes').select2('focus');
            return false;
        }
        pago = parseFloat($('.pago').html()) ;
        if( $(':invalid').length>0 || pago<=0 ){
            jAlert( 'Completar todos los datos para registrar el pago!');
            return false;
        }else{
            if( pago < $('#comprasbundle_pagoproveedor_importe').val() ){
                jAlert( 'Debe ingresar valores suficientes para cancelar el Total!');
                return false;
            }
        }

        if( !confirm('CONFIRMA LA REGISTRACIÓN DEL PAGO?')){
            return false;
        }
        // enviar guardado

        data = $('#comprasbundle_pagoproveedor').serialize();
        $.ajax({
            type: "POST",
            url: '{{ path("compras_proveedor_pagos_create") }}',
            data: data,
            dataType: 'json',
            success: function(res){
                if (res.msg=='OK') {
                    if( res.urlretrentas ){
                        window.open(res.urlretrentas);
                    }
                    window.location.href = res.urlback;
                }else{
                    jAlert(res.msg);
                }
            },
            error: function(error){
                jAlert("No se pudo generar el pago!");
            }
        });

    });

        $pagosHolder = $('table.tabla-pagos tbody');
        $pagosHolder.find('.delTd').each(function() {
            addPagoDeleteLink($(this));
        });
        $pagosHolder.find('.ordTd').each(function(i) {
            $(this).html(i + 1);
        });
        $('#linkAddPago').on('click', function(e) {
            e.preventDefault();
            $( "#dialog-tipo" ).dialog('open');
            $('#dialog-tipo button').first().focus();
        });

        $('#dialog-tipo button').on('click', function(){
            tipo = $(this).data('tipo');
            $( "#dialog-tipo" ).dialog('close');
            addNewPago(tipo);
        })

    //calcularTotal();
    actualizarPagos();
    addNewPago('EFECTIVO');


});
function cargarCheques(objTd){
    var rutaChequesCartera="{{ path('compras_proveedor_pagos_getcheques')}}";
    var getDatosCheque="{{ path('compras_proveedor_pagos_getdatoscheque')}}";

    $('#popup').html('<div class="loaders" style="width: 100%;text-align: center;margin-top: 10px;"><img src="{{asset('assets/images/loaders/loader1.gif')}}" alt="" /></div>')
               .load( rutaChequesCartera)
               .dialog({
                    modal: true, autoOpen: true, title: 'Cheques en Cartera', width: '70%', minHeight: 400,
                    buttons: [{text: "Agregar", class: 'closePopup',
                            click: function() {
                                cheques = $(this).find('input[type="checkbox"]:checked');
                                addNewTr = false;
                                cheques.each(function(i) {
                                    $.get(getDatosCheque,{id: $(this).attr('id') },
                                        function(data){
                                            if(addNewTr){
                                                addNewPago('CHEQUE')
                                                lastTr = $pagosHolder.find('tr').last();
                                                chequeTd = lastTr.find('.chequeTd');
                                            }else{
                                                chequeTd = objTd
                                                addNewTr = true;
                                            }

                                            chequeTd.find('[id*="_chequeRecibido_id"]').val(data.id)
                                            chequeTd.find('[id*="_chequeRecibido_nroCheque"]').val(data.nroCheque)
                                            chequeTd.find('[id*="_chequeRecibido_fecha"]').val(data.fecha)
                                            chequeTd.find('[id*="_chequeRecibido_dador"]').val(data.dador)
                                            chequeTd.find('[id*="_chequeRecibido_banco"]').val(data.banco).trigger('change')
                                            chequeTd.find('[id*="_chequeRecibido_sucursal"]').val(data.sucursal)
                                            chequeTd.find('[id*="_chequeRecibido_valor"]').val(data.valor)
                                            chequeTd.parent().find('[id*="_importe"]').val(data.valor)
                                            actualizarPagos();
                                    }, "JSON");
                                });

                                $(this).dialog("close");
                            }}],
                });
}

    function addNewPago( tipo){
        const prototype = $pagosHolder.data('prototype');
        const index = $pagosHolder.data('index');
        const newForm = prototype.replace(/items/g, index);

        $pagosHolder.append(newForm);
        $pagosHolder.data('index', index + 1);
        lastTr = $pagosHolder.find('tr').last();
        addPagoDeleteLink(lastTr.find('.delTd'));
        lastTr.find('[id*="_tipoPago"]').val(tipo);
        importe = lastTr.find('[id*="_importe"]');
        importe.val(0)
        importe.on('focus',function(e) {
            $(this).select();
        })
        importe.on('change', function() {
            if( $(this).siblings('[id*="_tipoPago"]').val() == 'CHEQUE' ){
                // cargar valor al cheque
                chequeTd = $(this).parent().parent().find('td.chequeTd');
                chequeTd.find( '[id*="_valor"]' ).val( $(this).val());
            }
            actualizarPagos();
        });

        if(tipo != 'TARJETA'){
            lastTr.find('.tarjetaTd').remove();
        }else{
            // tarjeta
            lastTr.find('[id*="_datosTarjeta_tarjeta"]').attr('required', true);
            lastTr.find('[id*="_datosTarjeta_numero"]').inputmask(
                {"mask": "9999 9999 9999 9999",
                    onincomplete: function() {
                        if( $(this).val() ){
                            $(this).addClass('error');
                        }else{
                            $(this).removeClass('error');
                        }
                    },
                    oncomplete: function() {
                        $(this).removeClass('error');
                    }
                }
                );
            lastTr.find('[id*="_datosTarjeta_cuota"]').val(1);
            // chequetd required false
            lastTr.find('.chequeTd :required').each(function() {
                $(this).attr('required',false) ;
            })
            lastTr.find('[id*="_datosTarjeta_tarjeta"]').focus();
        }
        if( tipo != 'CHEQUE'){
            lastTr.find('.chequeTd').remove();
        }else{
            lastTr.find('[id*="_chequeRecibido_fecha"]').datepicker({dateFormat: 'dd-mm-yy'});
            // agregar boton para buscar cheques
            lastNro = lastTr.find('[id*="_chequeRecibido_nroCheque"]')
            btnSearch = $('<a href="javascript:void(0)" class="js_get_cheques btn btnaction btn_search" title="Buscar cheques en cartera"></a>')
            btnSearch.insertAfter(lastNro)
            // tarjetaTd required false
            lastTr.find('.tarjetaTd :required').each(function() {
                $(this).attr('required',false) ;
            })
            selectBanco = lastTr.find('.selectBanco');
            selectBanco.select2({
                tags: true,
                createTag: function (params) {
                    var term = $.trim(params.term).toUpperCase();
                    if (term === '') {
                        return null;
                    }
                    return {
                        id: term,
                        text: term,
                        newTag: true // add additional parameters
                    }
                }
            });
            lastTr.find('[id*="_chequeRecibido_nroCheque"]').focus();
        }
        if( tipo != 'EFECTIVO'){
            lastTr.find('.monedaTd').hide();
        }else{
            lastTr.find('.tarjetaTd :required, .chequeTd :required').each(function() {
                $(this).attr('required',false) ;
            })
            importe.focus();
        }
    }

    function addPagoDeleteLink($itemFormTd) {
        var $removeFormA = $('<a href="#" class="delItem" title="Quitar"><span class="del-item-button">-</span></a>');
        $itemFormTd.append($removeFormA);
        $removeFormA.on('click', function(e) {
            if ( confirm('Desea eliminar este item?')) {
                e.preventDefault();
                $itemFormTd.parent().remove();
                actualizarPagos();
            }
        });
        $removeFormA.on('blur', function(e) {
            $('#linkAddPago').focus();
        });
    }

    function changeComprobantes(provId,selected){
        data = { 'provId':provId, 'selected': selected };
        $.ajax({
            url: "{{ path("compras_proveedor_pagos_getMontoAPagar") }}",
            data: data ,
            success: function(data) {
                $('#comprasbundle_pagoproveedor_baseImponibleRentas').val(data.baseImponible);
                $('#comprasbundle_pagoproveedor_retencionRentas').val(data.rentas);
                $('#comprasbundle_pagoproveedor_adicionalRentas').val(data.adicional);
                $('#comprasbundle_pagoproveedor_montoRentas').val( (data.rentas + data.adicional).toFixed(3));
                $('#comprasbundle_pagoproveedor_retencionGanancias').val(data.ganancias.toFixed(3));
                $('#comprasbundle_pagoproveedor_importe').val(data.total.toFixed(3));
                $('#lblGanancia').html( (data.porcGanancia) ? '[ ' + data.porcGanancia.toFixed(2)  + '% ]' : '' );
                actualizarPagos();
            },
            error: function() {
                alert('No se puede realizar la operación en este momento');
            }
       });
    }


    function actualizarPagos() {
        total = checknumero( $('#comprasbundle_pagoproveedor_importe'),2 );
        pagos = 0;
        items = $(".tabla-pagos tbody tr.item");
        items.each(function(){
            importe = checknumero( $(this).find('[id*="_importe"]'),2 );
            pagos += importe
        });

        $('.pago').html( pagos.toFixed(2) );
        vuelto = pagos - total;
        $('.vuelto').html(vuelto.toFixed(2))
    }
});
</script>
{% endblock %}