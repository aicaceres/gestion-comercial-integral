<?php
namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use ConfigBundle\Controller\UtilsController;

/**
 * StockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRepository extends EntityRepository
{
    /*
     * Cantidad en stock por producto y deposito
     */
    public function getStockProductoDeposito($id,$dep){
        $query = $this->_em->createQueryBuilder('s')
                ->select('SUM(s.cantidad)')
                ->from('AppBundle\Entity\Stock','s')
                ->innerJoin('s.producto', 'p')
                ->innerJoin('s.deposito', 'd')
                ->where('p.id=:prodId')
                ->andWhere('d.id=:depId')
                ->setParameter('prodId', $id)
                ->setParameter('depId', $dep);
        return $query->getQuery()->getSingleScalarResult();  
    }
    
    /**
     * Encontrar en stock por producto y deposito
     */
    public function findProductoDeposito($prodId,$depId) {
        $query = $this->_em->createQueryBuilder('s')
                ->select('s')
                ->from('AppBundle\Entity\Stock','s')
                ->innerJoin('s.producto', 'p')
                ->innerJoin('s.deposito', 'd')
                ->where('p.id=:prodId')
                ->andWhere('d.id=:depId')
                ->setParameter('prodId', $prodId)
                ->setParameter('depId', $depId);                
        return $query->getQuery()->getOneOrNullResult();         
    }

    /*
     * Listado de Movimientos de stock agrupados por movimiento.
     */
    public function getGroupMovimientos(){
        $query = $this->_em->createQueryBuilder('m')
                ->select('m.fecha, d.nombre deposito, m.tipo, m.movimiento, count(m.id) cantidad, 0 signo, 0 detalle, 0 tipomov')
                ->from('AppBundle\Entity\StockMovimiento','m')
                ->innerJoin('m.deposito', 'd')
                ->groupBy('m.fecha, d.nombre, m.tipo, m.movimiento');
        return $query->getQuery()->getArrayResult(); 
    }
    /*
     * Detalle de un Movimiento
     */
    public function getDetalleMovimiento($tipo,$mov){
        $query = $this->_em->createQueryBuilder('m')
                ->select('m')
                ->from('AppBundle\Entity\StockMovimiento','m')
                ->where('m.tipo=:arg1')
                ->andWhere('m.movimiento=:arg2')
                ->setParameter('arg1', $tipo)
                ->setParameter('arg2', $mov);
        return $query->getQuery()->getResult();
    }


    /*public function getLotesByProdDep($prodId,$depId){
        $query = $this->_em->createQueryBuilder('s')
                ->select('s')
                ->from('CM\AdminBundle\Entity\Stock','s')
                ->innerJoin('s.producto', 'p')
                ->innerJoin('s.deposito', 'd')
                ->where('p.id=:prodId')
                ->andWhere('d.id=:depId')
                ->andWhere('s.cantidad>0')
                ->orderBy('s.created')
                ->setParameter('prodId', $prodId)
                ->setParameter('depId', $depId);
        return $query->getQuery()->getResult();        
    }*/    
    
    public function findByCriteria($unidneg, $prodId=NULL, $desde=NULL, $hasta=NULL){
        $query = $this->_em->createQueryBuilder();
        $query->select('m')
              ->from('AppBundle\Entity\StockMovimiento', 'm')
              ->innerJoin('m.deposito', 'd')
              ->innerJoin('d.unidadNegocio','u')
              ->where("u.id=".$unidneg) ;  
        
        if($prodId){
            $query->innerJoin('m.producto', 'pr')
                    ->andWhere('pr.id='.$prodId);
        }
        if($desde){
          $cadena = " m.fecha >= '".UtilsController::toAnsiDate($desde)."'";
          $query->andWhere($cadena);
        }
        if($hasta){
            $cadena = " m.fecha <= '". UtilsController::toAnsiDate($hasta)."'";
            $query->andWhere($cadena);
        }
        
        return $query->getQuery()->getResult();
    }
    
    public function getAjustesByCriteria($depId,$periodo){
        $query = $this->_em->createQueryBuilder();
        $query->select('a')
              ->from('AppBundle\Entity\StockAjuste', 'a')
              ->innerJoin('a.deposito', 'd')
              ->where('d.id='.$depId )  
              ->andWhere("a.fecha>='".UtilsController::toAnsiDate($periodo['desde'])." 00:00'")
              ->andWhere("a.fecha<='".UtilsController::toAnsiDate($periodo['hasta'])." 23:59'");  
        return $query->getQuery()->getResult();
    }    
    
}
